
# -*- org-export-babel-evaluate: nil; -*-

#+OPTIONS: ^:nil 

* SQL Questions

First create a database called fringe_shows
#+BEGIN_SRC EXAMPLE

      #terminal
      psql
      create database fringe_shows;
      \q

#+END_SRC
Populate the data using the script - fringeshows.sql
#+BEGIN_SRC EXAMPLE

      #terminal
      psql -d fringe_shows -f fringeshows.sql

#+END_SRC

Using the SQL Database file above (fringeshows.sql) as the source of data, generate SQL commands the answer the following questions. Paste both the SQL command *and* the result under the questions below.

** Revision of concepts that we've learnt in SQL today

1. Select the names of all users.

 #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
SELECT * FROM users;
 #+END_SRC

  #+RESULTS: my-query
  | id | name              |
  |----+-------------------|
  |  1 | Rick Henry        |
  |  2 | Jay Chetty        |
  |  3 | Keith Douglas     |
  |  4 | Valerie Gibson    |
  |  5 | Steven Meiklejohn |
  |  6 | Zak Buys          |
  |  7 | Harry Swan        |
  |  8 | Henry Dashwood    |
  |  9 | Seumus Blair      |
  | 10 | David MacKintosh  |
  | 11 | Allan Harrison    |
  | 12 | Chris Wood        |
  | 13 | Adam Pinner       |
  | 14 | Jeffrey Lloyd     |
  | 15 | Alistair MacKay   |
  | 16 | Andrew Craib      |
  | 17 | Rebecca Kelly     |
  | 18 | Hamish Edmondson  |
  | 19 | Wojciech Tartanus |
  | 20 | Donald Lessels    |
  | 21 | Aidan Pinkman     |
  | 22 | Lewis Johnston    |

2. Select the names of all shows that cost less than £15.

 #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
select name from shows where price < 15 ;
 #+END_SRC 

  #+RESULTS:
  | name                         |
  |------------------------------|
  | Le Haggis                    |
  | Paul Dabek Mischief          |
  | Best of Burlesque            |
  | Two become One               |
  | Urinetown                    |
  | Two girls, one cup of comedy |

3. Insert a user with the name "Val Gibson" into the users table.

 #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
insert into users (name) values ('Val Gibson');
 #+END_SRC

 #+RESULTS:
  | INSERT 0 1 |
  |------------|


4. Select the id of the user with your name.

 #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
select id from users where name = 'Hamish Edmondson';
 #+END_SRC

  #+RESULTS:
  | id |
  |----|
  | 18 |

5. Insert a record that Val Gibson wants to attend the show "Two girls,
    one cup of comedy".

  #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
 INSERT INTO "shows_users" (show_id, user_id) VALUES ((SELECT id from shows where name = 'Two girls one cup of comedy'), (SELECT id from users where name = 'Val Gibson' ));
  #+END_SRC

  #+RESULTS:
  | INSERT 0 1 |
  |------------|

6. Updates the name of the "Val Gibson" user to be "Valerie Gibson".

  #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
UPDATE users SET name='Valerie Gibson' WHERE (name='Val Gibson');
  #+END_SRC

  #+RESULTS:
  | UPDATE 1 |
  |----------|

7. Deletes the user with the name 'Valerie Gibson'.

  #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
DELETE from users where name='Valerie Gibson';
  #+END_SRC

  #+RESULTS:
  | DELETE 0 |
  |----------|

8. Deletes the shows for the user you just deleted.

  #+BEGIN_SRC sql :engine postgresql :exports both :cmdline -d fringe_shows
delete id from shows_users where show_id is NULL;
  #+END_SRC

  #+RESULTS:

** More Complex Queries.

You will need to go and find out about *aggregate funcions* in SQL to answer some of the next
questions.

9.  Ordering
   -  Select the names and prices of all shows, ordered by price in ascending order.
10. Select the average price of all shows.
11. Select the price of the least expensive show.
   -  select name, show where price from shows where price IN(selct max price from shows)
12. Select the sum of the price of all shows.
13. Select the sum of the price of all shows whose prices is less than £20.
14. Select the name and price of the most expensive show.
15. Select the name and price of the second from cheapest show.
16. Select the names of all users whose names start with the letter "A".
17. Select the names of users whose names contain "el".

** JOIN Clauses

The following questions can be answered by using nested SQL statements
but ideally you should learn about JOIN clauses to answer them.

18. Select the time for the Edinburgh Royal Tattoo.

19. Select the number of users who want to see "Le Haggis".

20. Select all of the user names and the count of shows they're going to
    see.

21. SELECT all users who are going to a show at 13:30.

* Hints

-  As with anything, if you get stuck, move on, then go back if you have
   time.
-  Don't spend all night on it!
-  Use resources online to solve harder ones - there are solutions to
   these questions that work with what we've learnt today, but other
   tools exist in SQL that could make the queries 'better' or 'easier'.

* Notes
** Dropping the database

** loading the file
